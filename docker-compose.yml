version: '3.8'

services:
  # Redis服务 - 消息队列和缓存
  redis:
    image: redis:7-alpine
    container_name: ai-video-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-video-network

  # API服务
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ai-video-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./input_data:/app/input_data
      - ./output_data:/app/output_data
      - ./logs:/app/logs
      - api_cache:/app/.cache
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-video-network

  # Celery Worker服务
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: ai-video-worker
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - C_FORCE_ROOT=1
    volumes:
      - ./input_data:/app/input_data
      - ./output_data:/app/output_data
      - ./logs:/app/logs
      - ./models:/app/models  # Whisper模型缓存
      - worker_cache:/app/.cache
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-video-network
    deploy:
      replicas: 2  # 运行2个worker实例
      resources:
        limits:
          memory: 4G  # Whisper需要更多内存

  # Flower监控服务
  flower:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ai-video-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    command: celery -A worker.celery_app flower --basic-auth=admin:admin123
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-video-network

  # MinIO对象存储服务 (可选)
  minio:
    image: minio/minio:latest
    container_name: ai-video-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-video-network

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: ai-video-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./output_data:/var/www/static:ro
    depends_on:
      - api
      - flower
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - ai-video-network
    profiles:
      - production  # 仅在生产环境启用

  # Prometheus监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-video-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-video-network
    profiles:
      - monitoring  # 仅在启用监控时启用

  # Grafana仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-video-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-video-network
    profiles:
      - monitoring  # 仅在启用监控时启用

# 网络配置
networks:
  ai-video-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  api_cache:
    driver: local
  worker_cache:
    driver: local
  whisper_models:
    driver: local  # Whisper模型缓存